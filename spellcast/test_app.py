from app import check_file, check_word

def test_check_file():
    assert check_file("words/3-letter-words.json", [["c" ,"a" ,"t", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""]]) == [("Cat", [1, 2, 3])]
    assert check_file("words/7-letter-words.json", [["f" ,"d" ,"s", "s", "f"], ["r" ,"h" ,"s", "s", "f"], ["r" ,"y" ,"r", "r", "u"], ["y" ,"i" ,"e", "t", "w"], ["e" ,"y" ,"w", "r", "w"]]) == [("Furrier", [10, 15, 14, 13, 17, 18, 24]),("Surreys", [9, 15, 14, 13, 18, 12, 8])]
    assert check_file("words/6-letter-words.json", [["f" ,"d" ,"s", "s", "f"], ["r" ,"h" ,"s", "s", "f"], ["r" ,"y" ,"r", "r", "u"], ["y" ,"i" ,"e", "t", "w"], ["e" ,"y" ,"w", "r", "w"]]) == [('Dryers', [2, 6, 12, 18, 13, 8]), ('Fryers', [1, 6, 12, 18, 13, 8]), ('Shyers', [3, 7, 12, 18, 13, 8]), ('Surrey', [9, 15, 14, 13, 18, 12]), ('Triers', [19, 13, 17, 18, 14, 8]), ('Twiers', [19, 23, 17, 18, 13, 8]), ('Twyers', [19, 23, 22, 18, 13, 8]), ('Wirers', [23, 17, 13, 18, 14, 8])]
    assert check_file("words/5-letter-words.json", [["t" ,"x" ,"j", "i", "a"], ["d" ,"s" ,"w", "b", "c"], ["o" ,"i" ,"r", "i", "u"], ["a" ,"i" ,"e", "o", "w"], ["e" ,"m" ,"w", "r", "a"]]) == [('Abris', [5, 9, 13, 12, 7]), ('Aimer', [16, 17, 22, 18, 13]), ('Airer', [16, 12, 13, 18, 24]), ('Amirs', [16, 22, 17, 13, 7]), ('Areic', [25, 24, 18, 14, 10]), ('Biers', [9, 14, 18, 13, 7]), ('Brier', [9, 13, 12, 18, 24]), ('Brios', [9, 13, 12, 11, 7]), ('Direr', [6, 12, 13, 18, 24]), ('Eidos', [18, 12, 6, 11, 7]), ('Emirs', [18, 22, 17, 13, 7]), ('Erica', [18, 13, 14, 10, 5]), ('Icier', [4, 10, 14, 18, 13]), ('Irids', [14, 13, 12, 6, 7]), ('Maids', [22, 16, 12, 6, 7]), ('Mairs', [22, 16, 12, 13, 7]), ('Maist', [22, 16, 12, 7, 1]), ('Mirid', [22, 17, 13, 12, 6]), ('Odist', [11, 6, 12, 7, 1]), ('Oribi', [19, 13, 14, 9, 4]), ('Osier', [11, 7, 12, 18, 13]), ('Rimer', [13, 17, 22, 18, 24]), ('Rower', [13, 19, 23, 18, 24]), ('Weirs', [23, 18, 12, 13, 7]), ('Wirer', [8, 12, 13, 18, 24]), ('Worst', [20, 19, 13, 7, 1]), ('Wrier', [8, 13, 12, 18, 24]), ('Wrist', [8, 13, 12, 7, 1])]

def test_check_word():
    assert check_word("cat", [["c" ,"a" ,"t", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""], ["" ,"" ,"", "", ""]]) == ('Cat', [1, 2, 3])
    assert check_word("worst", [["t" ,"x" ,"j", "i", "a"], ["d" ,"s" ,"w", "b", "c"], ["o" ,"i" ,"r", "i", "u"], ["a" ,"i" ,"e", "o", "w"], ["e" ,"m" ,"w", "r", "a"]]) == ('Worst', [20, 19, 13, 7, 1])
    assert check_word("dryers", [["f" ,"d" ,"s", "s", "f"], ["r" ,"h" ,"s", "s", "f"], ["r" ,"y" ,"r", "r", "u"], ["y" ,"i" ,"e", "t", "w"], ["e" ,"y" ,"w", "r", "w"]]) == ('Dryers', [2, 6, 12, 18, 13, 8])
